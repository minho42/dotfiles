{
  // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "abrrow function": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "af",
    "body": ["($1) => {", "  $2", "}$3"]
  },
  "blog frontmatter": {
    "scope": "markdown",
    "prefix": "---",
    "body": ["---", "title: $1", "date: \"$2\"", "---", "$3"]
  },
  "fetch request": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "fetchRequest",
    "body": [
      "try {",
      "  const res = await fetch(\"$1\", {",
      "    method: \"POST\",",
      "    headers: {",
      "      \"Content-Type\": \"application/json\",",
      "    },",
      "    credentials: \"include\",",
      "    body: JSON.stringify($2),",
      "  })",
      "  if (!res.ok) {",
      "    throw new Error(\"$3\")",
      "  }",
      "  const data = await res.json()",
      "  console.log(data$4)",
      "} catch (error) {",
      "  console.log(error)",
      "}$5"
    ]
  },
  "post request option": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "fetchOptions",
    "body": [
      "{",
      "  method: \"POST\",",
      "  headers: {",
      "    \"Content-Type\": \"application/json\",",
      "  },",
      "  credentials: \"include\",",
      "  body: JSON.stringify($1),",
      "}$2"
    ]
  },
  "css antialiased": {
    "scope": "css",
    "prefix": "antialiased",
    "body": [
      "body {",
      "  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Noto Sans\", Helvetica, Arial, sans-serif,",
      "    \"Apple Color Emoji\", \"Segoe UI Emoji\";",
      "  -webkit-font-smoothing: antialiased;",
      "  -moz-osx-font-smoothing: grayscale;",
      "}$1"
    ]
  },
  "django template url": {
    "scope": "html",
    "prefix": "%url",
    "body": ["{% url '$1' %}"]
  },
  "django template if": {
    "scope": "html",
    "prefix": "%if",
    "body": ["{% if $1 %}", "{% endif %}"]
  },
  "django template ifelse": {
    "scope": "html",
    "prefix": "%ifelse",
    "body": ["{% if $1 %}", "{% else %}", "{% endif %}"]
  },
  "django template for": {
    "scope": "html",
    "prefix": "%for",
    "body": ["{% for $1 in $2 %}", "{% endfor %}"]
  },
  "django template with": {
    "scope": "html",
    "prefix": "%with",
    "body": ["{% with $1 %}", "{% endwith %}"]
  },
  "django template extends": {
    "scope": "html",
    "prefix": "%extends",
    "body": ["{% extends 'base.html' %}"]
  },
  "django template load": {
    "scope": "html",
    "prefix": "%load",
    "body": ["{% load $1 %}"]
  },
  "django template include": {
    "scope": "html",
    "prefix": "%include",
    "body": ["{% include '$1' %}"]
  },
  "django template load crispy_forms_tags": {
    "scope": "html",
    "prefix": "%loadcrispy",
    "body": ["{% load crispy_forms_tags %}"]
  },
  "django csrf_token": {
    "scope": "html",
    "prefix": "csrftoken",
    "body": ["{% csrf_token %}"]
  }
}
